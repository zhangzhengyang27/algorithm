package class01;

public class code01_PrintB {
    //  打印一个整数数的32位都是什么
    //  test<<1 向左移动1位，相当于乘以2
    //  &运算规则是两个1相遇为1；1与0相遇为0；0与1相遇为0；0与0相遇也为0
    //  1<<31位，就是1的二进制向左移31位，空出来的用0补充  00000000000000000000000000000001
    //  -2的31次方~2的31次方减1
    public static void print(int num) {
        for (int i = 31; i >= 0; i--) {
            System.out.print((num & (1 << i)) == 0 ? "0" : "1");
        }
        System.out.println();
    }


    public static void main(String[] args) {
        int num = 121231231;
        print(num);

        //  最大整型数据的2进制表示
        int a = Integer.MAX_VALUE;
        System.out.println(a);
        print(a);
        System.out.println("----------------------");

        //  第一位是0    代表是正数
        //	第一位是1	代表是负数，值就是后面其他的地方取反，再加上1
        print(-1);  // 11111111111111111111111111111111
        int aa = Integer.MIN_VALUE;
        print(aa); // 10000000000000000000000000000000
        /*
         * 10000000000000000000000000000000
         * 11111111111111111111111111111111  取反操作，后面还要加1，会产生进位
         * 10000000000000000000000000000000
         * */
        System.out.println("----------------------");

        // ~ 取反符号
        int b = 123823138;
        int c = ~b;
        print(b);
        print(c);
        /*
        00000111011000010110010000100010
        11111000100111101001101111011101
        */
        System.out.println("----------------------");
        System.out.println("Integer.MIN_VALUE" + Integer.MIN_VALUE); // -2147483648
        System.out.println("Integer.MAX_VALUE" + Integer.MAX_VALUE); // 2147483647

        System.out.println("----------------------");

        int a1 = 12319283;
        int b1 = 3819283;
        print(a1);
        print(b1);

        print(a1 | b1);//但凡有1的全为1
        print(a1 & b1);//只有都为1的才为1
        print(a1 ^ b1);//相同为0，不同为1
        /*
        00000000101110111111101000110011
        00000000001110100100011100010011
        00000000101110111111111100110011
        00000000001110100100001000010011
        00000000100000011011110100100000
        */
        System.out.println("=======================");

        // >>  右移过后前面的空位用符号位补
        // >>> 右移过后前面的空位用0位补
        int a2 = -1024;
        print(a2);
        print(a2 >> 1);
        print(a2 >>> 1);
        /*
        11111111111111111111110000000000
        11111111111111111111111000000000
        01111111111111111111111000000000
        */

        System.out.println("----------------------");
        // 负数的最小值的绝对值，还是它自身
        // -相当于~之后+1的操作
        int c2 = Integer.MIN_VALUE;
        int d = -c2;
        System.out.println(c2);
        System.out.println(d);
        print(c2);
        print(d);
        /*
        * 10000000000000000000000000000000  Integer.MIN_VALUE
          01111111111111111111111111111111  取反
          10000000000000000000000000000000  加1之后还是自身
        */

    }
}
